#!/bin/bash

# ensure we're in the right directory
export DATABOX_PATH=$(dirname $(realpath "$0"))
cd "$DATABOX_PATH"

# include helper functions
source ./scripts/utils.sh

## debug
if [[ "$DATABOX_DEBUG" = "true" ]]; then
    set -x
    PS4='$LINENO: '
fi

declare -r ME="$(basename $0)"

## check we have the tools
if ! [ -x "$(command -v docker)" ]; then
    die 1 "docker is not installed;"`
       `"see https://docs.docker.com/engine/installation/"
fi

if ! [ -x "$(command -v docker-compose)" ]; then
    die 2 "docker-compose is not installed;"`
       `"see https://docs.docker.com/compose/install/#install-compose"
fi

## parse command line args
DOCKER_REPO="" #default to local images
DATABOX_SDK="0"
DATABOX_DEV="0"
DEV=0
SDK=0
LATEST=0
case "$1" in
    dev )
        DEV=1
        export DATABOX_DEV="1"
        ;;
    latest )
        LATEST=1
        export DATABOX_DEV="1"
        ;;
    sdk )
        SDK=1
        ;;
esac


#Start the SDK
if [ "$SDK" == "1" ]
then
    err "Starting SDK"
    export HOSTMOUNT=$(pwd -P)
    docker-compose -f docker-databox-sdk.yaml up -d
fi

## test if Databox is already running
err "Testing if Databox is already running ..."
docker stack ps databox >/dev/null 2>&1
assert_or_die $? 1 "Databox is already running!"

## extract a host interface IP address
err "Obtaining host interface IP address ..."
ips=($(ifconfig | grep "inet " | grep -v 127.0.0.1 | grep -v 172. | awk 'match($0, /([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/) {print substr($0,RSTART,RLENGTH)}'))
EXT_IP=${ips}

if [[ "${#ips[@]}" -gt "1" ]]; then
    err "More than one IP found! Please select just one:"
    if [[ "${DATABOX_TESTING}" == 1 ]]
    then
        err "Running in testing mode using 127.0.0.1"
        EXT_IP="127.0.0.1"
    else
        select ip in ${ips[*]}; do
            case ${ip} in
                exit )
                    die 0 "exiting ..."
                    break
                    ;;

                * )
                    EXT_IP=${ip}
                    break
                    ;;
            esac
        done
    fi
fi
err "host interface IP address = ${HOST_IP}"

## Get the external IP of the databox used for NATed set-ups over HTTPS
cd dockerfiles/curl
docker build -t databoxsystems/curl . >/dev/null
if [ "$?" != "0" ]
then
  die 1 'Error building databoxsystems/curl. Is docker working?'
fi
cd ../..
EXT_IP=$(docker run --rm -t databoxsystems/curl -s http://whatismyip.akamai.com/)
if [ "$?" != "0" ]
then
  die 1 'Error getting external IP address. Do you have network connectivity?'
fi
err "External interface IP address = ${EXT_IP}"

## base images: what are we running on?
ARCH=$(uname -m)
case "$ARCH" in
    armv7l )
        NODE_IMAGE="hypriot/rpi-node:slim"
        DEV=1 #ARM is only supported in dev mode with locally built images (for now)
        export DATABOX_ARCH="-"${ARCH}
        export DATABOX_DEV="1"
        ;;

    aarch64 )
        NODE_IMAGE="forumi0721alpineaarch64/alpine-aarch64-nodejs"
        DEV=1 #ARM is only supported in dev mode with locally built images (for now)
        export DATABOX_ARCH="-"${ARCH}
        export DATABOX_DEV="1"
        ;;

    * )
        ARCH=""
        NODE_IMAGE="node:alpine"
        export DATABOX_ARCH=""
        ;;
esac

DOCKER_REPO="databoxsystems/"   # https://hub.docker.com/r/databoxsystems/
DATABOX_CORE_IMAGE_VERSION=$(<./Version)
DATABOX_VERSION=$(<./Version)

if [ "$LATEST" == "1" ]
then
    DOCKER_REPO="databoxsystems/"
    DATABOX_CORE_IMAGE_VERSION="latest"
    DATABOX_VERSION="latest"
fi

if [ "$DEV" == "1" ]
then
    DOCKER_REPO=""
    DATABOX_CORE_IMAGE_VERSION="latest"
    DATABOX_VERSION="latest"
fi

err "Starting version ${DATABOX_VERSION}"
export DOCKER_REPO DATABOX_VERSION DATABOX_CORE_IMAGE_VERSION

function _exec {
    docker run --net=host -i --rm -v ${DATABOX_PATH}:/cwd -w /cwd \
           ${DARGS} ${NODE_IMAGE} "$@"
}

_exec npm install -loglevel silent


if [ -d "${DATABOX_PATH}/certs" ] && [ ! -f "${DATABOX_PATH}/certs/app-server.pem" ]; then
    cat <<EOF
################################################################################
#                                  WARNING                                     #
#                                                                              #
# You appear to be upgrading from an old version of Databox.                   #
#                                                                              #
# Your certificates must be regenerated, and you will need to reinstall the    #
# root certificate on your system.                                             #
#                                                                              #
# Your old certificates will be backed up to ./certs-old.                      #
#                                                                              #
# Press any key to continue or ^C to exit.                                     #
#                                                                              #
################################################################################
EOF

    read -n 1 -s

    mv ${MY_PATH}/certs ${MY_PATH}/certs-old-0.4.0
fi

mkdir -p ./certs
echo ${EXT_IP} ${ips[@]}

err "Creating certificates ..."
_exec node ./src/createCerts.js ${HOST_IP} ${EXT_IP} ${ips[@]}

if [ "$DEV" == "1" ]
then
    # build all images locally in dev mode
    err "In dev mode so build and run core components locally ..."
    ./databox-fetch-components
    source ./databox-build-core
    assert_or_die $? 0 "Problem building core images"
fi

docker node ls >/dev/null 2>&1
if [[ "$?" == "1" ]]
then
    err "Starting the Databox swarm"
    docker swarm init --advertise-addr ${EXT_IP} 2>&1
fi

err "Starting Databox"
docker network create -d overlay --attachable databox-system-net

export BCAST_FIFO="/tmp/databox_relay"
export BCAST_IP=${HOST_IP}

if [ ! -p "${BCAST_FIFO}" ]; then
  mkfifo ${BCAST_FIFO}
fi

docker-compose -f ./docker-core-network.yaml up -d
_exec node ./src/createResolvConf.js "$(docker inspect $(docker ps -q --filter="name=databox-network"))"
docker-compose -f ./docker-databox-appstore.yaml up -d # --remove-orphans
docker stack deploy -c docker-compose.yaml databox --prune
assert_or_die $? 0 "Problem with Docker stack deploy"

if [ "$DEV" == "1" ]
then
    err "Sleep for 10s to ensure everything has started ..."
    sleep 10

    err "Install sample drivers and apps ..."
    ./databox-install-component driver-sensingkit &
    ./databox-install-component driver-os-monitor &
    ./databox-install-component app-os-monitor &

    wait
fi

err "Databox started! Visit http://localhost"
if [ -z "$DATABOX_TESTING" ]
then
    docker service logs databox_container-manager -f
fi
